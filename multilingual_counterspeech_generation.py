# -*- coding: utf-8 -*-
"""HateSpeechGeneration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kLvikn2sMa62vwbiAWuLTijyZdOD3q4W
"""

!pip install openai==0.28
!pip install langdetect
!pip install gradio
!pip install transformers
!pip install pandas scikit-learn
!pip install polyglot
!pip install pyicu
!pip install pycld2
!pip install nltk rouge-score

import openai

# Set up OpenAI API key
openai.api_key = "your-api-key"

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def find_label(hate_speech_input):

  # Load dataset (change this to your dataset path)
  df = pd.read_csv('/path/your_file')  # Replace with your file path

  # User input for hate speech
  user_input = hate_speech_input

  # Initialize the TF-IDF Vectorizer
  vectorizer = TfidfVectorizer()

  # Combine the user input with the dataset text for vectorization
  corpus = df['HS'].tolist() + [user_input]

  # Fit and transform the data to get the TF-IDF matrix
  tfidf_matrix = vectorizer.fit_transform(corpus)

  # Calculate cosine similarity between the user input (last vector) and all rows
  cosine_similarities = cosine_similarity(tfidf_matrix[-1], tfidf_matrix[:-1])

  # Add cosine similarities to the dataframe
  df['Cosine_Similarity'] = cosine_similarities.flatten()

  # Sort the dataframe by Cosine_Similarity in descending order and get top 5
  top_5 = df.nlargest(5, 'Cosine_Similarity')

  # Print the top 5 rows with the highest cosine similarity scores
  print(top_5[['Cosine_Similarity', 'HS', 'TARGET']])  # Adjust as needed for more columns

  # Check for any cosine similarity values above the threshold
  threshold = 0.7
  above_threshold = top_5[top_5['Cosine_Similarity'] > threshold]

  if not above_threshold.empty:
      # If any rows meet the threshold, the most common value is the HS value of the highest match
      most_common_value = above_threshold['TARGET'].iloc[0]
  else:
      # Otherwise, find the most common value in the top 5 rows
      most_common_value = top_5['TARGET'].mode()[0]

  '''# Find the most common value in the 'HS' column of the top 5 rows
  most_common_value = top_5['TARGET'].mode()[0]

  # Print the most common value in the 'HS' column
  print("\nMost Common Value in the 'TARGET' Column (in Top 5):")
  print(most_common_value)'''

  if most_common_value in ['JEWS','POC','LGBT+','MIGRANTS','WOMEN']:
    return [False, most_common_value]
  else:
    return [True, most_common_value]

import openai
from langdetect import detect
from transformers import pipeline
import gradio as gr
from polyglot.detect import Detector


# Load Hugging Face Sentiment Analysis Pipeline
sentiment_analyzer = pipeline("sentiment-analysis")

def get_toxicity_score_sentiment(text):
    """
    Calculate a toxicity value based on sentiment analysis.
    Returns a toxicity value in the range [0, 1], where:
    - 0 indicates neutral/positive sentiment (low toxicity).
    - 1 indicates highly negative sentiment (high toxicity).
    """
    result = sentiment_analyzer(text)[0]  # Process the first result
    sentiment = result["label"]  # Either "NEGATIVE" or "POSITIVE"
    score = result["score"]  # Confidence score of the sentiment

    if sentiment == "NEGATIVE":
        return score  # High negative score correlates with higher toxicity
    return 1 - score  # Invert for positive/neutral sentiment

def generate_counter_narrative(hate_speech_input, mode="few-shot"):
    """
    Generate a counter-narrative for the given hate speech input.
    Supports one-shot and few-shot prompting.
    """

    # Detect the language of the input
    detector = Detector(hate_speech_input)
    detected_language = detector.language.code
    print('DETECT: ',detected_language)
    if detected_language == 'sq':
      detected_language = 'eu'
    if detected_language in ['da','sv','nl']:
      detected_language = 'en'

    language_mapping = {
        "es": "Spanish",
        "it": "Italian",
        "eu": "Basque",
        "en": "English",
    }

    if detected_language not in language_mapping:
        detected_language = 'en'

    language = language_mapping[detected_language]

    # Define one-shot and few-shot examples
    one_shot_example = f"""You are an AI trained to generate positive counter-narratives to hate speech.
    Take this as an example:
Hate speech: Transgenders don't deserve jobs.
Counter-narrative: Everyone, regardless of gender identity, has the right to work and contribute to society. Transgender individuals possess the same skills, qualifications, and potential as anyone else. Discriminating based on gender identity not only undermines human dignity but also limits the rich diversity and talent that strengthens our workplaces. Embracing inclusivity leads to stronger, more innovative, and compassionate communities.

Now, generate a counter-narrative in {language} for the following hate speech:
Hate speech: {hate_speech_input}
Counter-narrative:"""

    few_shot_example = f"""You are an AI trained to generate positive counter-narratives to hate speech.
Here are some examples:
Hate speech: Los inmigrantes están destruyendo nuestra cultura.
Counter-narrative: Los inmigrantes enriquecen nuestra cultura, aportando nuevas perspectivas, tradiciones y talentos que nos hacen más diversos y fuertes. La cultura de un país no es estática; se nutre y crece a través del intercambio de ideas y experiencias. Lejos de destruirla, los inmigrantes la transforman positivamente, creando una sociedad más inclusiva, abierta y vibrante.

Hate speech: Le donne non possono lavorare bene come gli uomini.
Counter-narrative: Le donne sono altrettanto capaci e competenti degli uomini in ogni ambito lavorativo. Le capacità professionali non dipendono dal genere, ma dalle esperienze, dall'educazione e dalla passione. Negare alle donne la possibilità di esprimere il loro potenziale è una perdita per la società e per il mondo del lavoro. L'uguaglianza di opportunità porta a team più forti e a risultati migliori.

Hate speech: Euskal herritarrak ez dute munduari ezer ematen.
Counter-narrative: Euskal herritarrak munduari askotariko ekarpenak egiten dizkiote, kultura, arte, zientzia eta kiroletan. Euskara, musika, dantza eta literatura, hala nola, Pablo Neruda eta Luis Iriondo bezalako pertsonaiak, mundu osoan ezagutuak dira. Euskal Herriak aniztasunaren eta berrikuntzaren sinbolo dira, eta euren ekarpenak munduko gizartean eragina izan dute.

Hate speech: Immigrants are taking our jobs.
Counter-narrative: Immigrants play a vital role in the economy by filling essential roles, creating jobs, and contributing to innovation. Far from taking jobs, they often take on work that supports industries and businesses that would otherwise struggle to thrive. Immigrants also contribute to the workforce, pay taxes, and help build the communities they live in. Embracing immigration strengthens our society and boosts economic growth, benefiting everyone.

Now, generate a counter-narrative in {language} for the following hate speech:
Hate speech: {hate_speech_input}
Counter-narrative:"""

    # Select the prompt based on mode
    prompt = one_shot_example if mode == "one-shot" else few_shot_example

    # Generate a response using OpenAI's GPT model
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=256,
        temperature=0.7,
        top_p=0.95,
        frequency_penalty=0,
        presence_penalty=0.6
    )

    # Extract and return the generated text
    return response.choices[0].message['content'].strip()

def generate_default_counter_narrative(hate_speech_input, mode="few-shot"):
    """
    Generate a counter-narrative for the given hate speech input.
    Supports one-shot and few-shot prompting.
    """
    # Detect the language of the input
    detector = Detector(hate_speech_input)
    detected_language = detector.language.code
    if detected_language == 'sq':
      detected_language = 'eu'
    if detected_language in ['da','sv','nl']:
      detected_language = 'en'

    language_mapping = {
        "es": "Spanish",
        "it": "Italian",
        "eu": "Basque",
        "en": "English",
    }

    if detected_language not in language_mapping:
        detected_language = 'en'

    language = language_mapping[detected_language]

    # Define one-shot and few-shot examples
    one_shot_example = f"""You are an AI trained to generate positive counter-narratives to hate speech.
    Take this as an example:
Hate speech: Transgenders don't deserve jobs.
Counter-narrative: Everyone, regardless of gender identity, has the right to work and contribute to society. Transgender individuals possess the same skills, qualifications, and potential as anyone else. Discriminating based on gender identity not only undermines human dignity but also limits the rich diversity and talent that strengthens our workplaces. Embracing inclusivity leads to stronger, more innovative, and compassionate communities.

Now, generate a counter-narrative in {language} for the following hate speech:
Hate speech: {hate_speech_input}
Counter-narrative:"""

    few_shot_example = f"""You are an AI trained to generate positive counter-narratives to hate speech.
Here are some examples:
Hate speech: Los inmigrantes están destruyendo nuestra cultura.
Counter-narrative: Los inmigrantes enriquecen nuestra cultura, aportando nuevas perspectivas, tradiciones y talentos que nos hacen más diversos y fuertes. La cultura de un país no es estática; se nutre y crece a través del intercambio de ideas y experiencias. Lejos de destruirla, los inmigrantes la transforman positivamente, creando una sociedad más inclusiva, abierta y vibrante.

Hate speech: Le donne non possono lavorare bene come gli uomini.
Counter-narrative: Le donne sono altrettanto capaci e competenti degli uomini in ogni ambito lavorativo. Le capacità professionali non dipendono dal genere, ma dalle esperienze, dall'educazione e dalla passione. Negare alle donne la possibilità di esprimere il loro potenziale è una perdita per la società e per il mondo del lavoro. L'uguaglianza di opportunità porta a team più forti e a risultati migliori.

Hate speech: Euskal herritarrak ez dute munduari ezer ematen.
Counter-narrative: Euskal herritarrak munduari askotariko ekarpenak egiten dizkiote, kultura, arte, zientzia eta kiroletan. Euskara, musika, dantza eta literatura, hala nola, Pablo Neruda eta Luis Iriondo bezalako pertsonaiak, mundu osoan ezagutuak dira. Euskal Herriak aniztasunaren eta berrikuntzaren sinbolo dira, eta euren ekarpenak munduko gizartean eragina izan dute.

Hate speech: Immigrants are taking our jobs.
Counter-narrative: Immigrants play a vital role in the economy by filling essential roles, creating jobs, and contributing to innovation. Far from taking jobs, they often take on work that supports industries and businesses that would otherwise struggle to thrive. Immigrants also contribute to the workforce, pay taxes, and help build the communities they live in. Embracing immigration strengthens our society and boosts economic growth, benefiting everyone.

Now, generate a counter-narrative in {language} for the following hate speech:
Hate speech: {hate_speech_input}
Counter-narrative:"""

    # Select the prompt based on mode
    prompt = one_shot_example if mode == "one-shot" else few_shot_example

    # Generate a response using OpenAI's GPT model
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=256,
        temperature=0.7,
        top_p=0.95,
        frequency_penalty=0,
        presence_penalty=0.6
    )

    # Extract and return the generated text
    return response.choices[0].message['content'].strip()

def process_hate_speech_with_sentiment(hate_speech_input, mode="few-shot"):
    """
    Detect toxicity using sentiment analysis and generate a counter-narrative.
    """
    # Step 1: Calculate toxicity score based on sentiment analysis
    toxicity_score = get_toxicity_score_sentiment(hate_speech_input)

    # Step 2: Calculate toxicity score based on sentiment analysis
    default = find_label(hate_speech_input)

    # Step 3: Generate a counter-narrative
    if default[0]:
      counter_narrative = generate_default_counter_narrative(hate_speech_input, mode=mode)
    else:
      counter_narrative = generate_counter_narrative(hate_speech_input, mode=mode)


    # Return both toxicity score and counter-narrative
    return counter_narrative, toxicity_score

    '''return {
        "hate_speech": hate_speech_input,
        "toxicity_score": toxicity_score,
        "label_tag": default[1],
        "counter_narrative": counter_narrative,
    }
'''
# Create the Gradio interface
interface = gr.Interface(
    fn=process_hate_speech_with_sentiment,          # The function to process user input
    inputs=gr.Textbox(label="Your Input"),  # Input component
    outputs=[
        gr.Textbox(label="Generated Response"),
        gr.Textbox(label="Toxicity Score"),
    ],  # Output component
    title="Simple Gradio UI",      # Title for the UI
    description="Input any hate speech, an appropriate counter narrative will be generated"
)

# Launch the interface with a public URL in Colab
interface.launch(share=True)

'''# Example usage
hate_speech_examples = [
    "Los negros no deberían tener derechos.",  # Spanish
    "Le donne non possono lavorare bene come gli uomini.",  # Italian
    "Homosexualak desberdinak dira beste pertsonekiko, sexu-joeragatik. Eta barrenean beren burua mesprezatzen dute.",    # Basque
    "Jews are a different race. They are descended from apes and have no place in a modern civilised society.",                # English
]

for hate_speech in hate_speech_examples:
    result = process_hate_speech_with_sentiment(hate_speech)
    print(f"\nHate Speech: {result['hate_speech']}")
    print(f"Toxicity Score: {result['toxicity_score']:.2f}")
    print(f"Counter-Narrative: {result['counter_narrative']}")
    print(f"Label Tag: {result['label_tag']}")
    print('-----------------------------------------------------------------')'''

import openai
from langdetect import detect

# Language detection and counter-narrative generation
def generate_zeroshot_counter_narrative(hate_speech_input):
    """
    This function generates a counter-narrative to a hate speech input,
    identifying the affected group and offering a thoughtful, respectful response.
    It also detects the language of the hate speech and ensures the response is in the same language.

    Parameters:
        hate_speech_input (str): The hate speech text input.

    Returns:
        str: The generated counter-narrative response in the same language as input.
    """

    # Detect the language of the input text
    detected_language = detect(hate_speech_input)
    print('Detected Lang:',detected_language)
    if detected_language == 'sq':
      detected_language = 'eu'

    # Ensure the input is one of the supported languages: Spanish, Italian, or Basque
    if detected_language not in ['es', 'it', 'en', 'eu']:
        return "Language not supported. Please provide input in Spanish, Italian, or Basque."

    # Define the appropriate prompt based on the detected language
    prompt = f"""
    A user has posted a hate speech comment: "{hate_speech_input}"

    Your task is to:
    1. Identify the group or individuals being targeted by the hate speech.
    2. Generate a counter-narrative that respectfully challenges the hate speech, promotes empathy, inclusivity, and offers an educational perspective to change the mindset of the person posting hate.

    The response should be thoughtful, respectful, and aligned with human dignity. The response must avoid escalating or mirroring the hate speech and should focus on counteracting negativity with a positive and factual approach.

    Respond in the same language as the input, which is {detected_language}.

    Reply with your counter-narrative:
    """

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",  # Changed 'engine' to 'model'
        messages=[{"role": "user", "content": prompt}], # Changed 'prompt' to 'messages' and formatted as a list of dictionaries
        max_tokens=200,  # Limit the output length
        temperature=0.8,  # Adjust creativity
        top_p=1.0,  # Focus on the most likely responses
        frequency_penalty=0.0,
        presence_penalty=0.0
    )

    # Extract and return the generated counter-narrative
    return response.choices[0].message['content'].strip()

# Example usage
hate_speech_input = "Euskal herritarrak ez dute munduari ezer ematen."
counter_narrative = generate_zeroshot_counter_narrative(hate_speech_input)
print(counter_narrative)

import gradio as gr

# Define the function for generating a response
def generate_response(user_input):
    response = generate_zeroshot_counter_narrative(user_input, mode="few-shot")
    return response

# Create the Gradio interface
interface = gr.Interface(
    fn=generate_response,          # The function to process user input
    inputs=gr.Textbox(label="Your Input"),  # Input component
    outputs=gr.Textbox(label="Generated Response"),  # Output component
    title="Simple Gradio UI",      # Title for the UI
    description="Input any hate speech, an appropriate counter narrative will be generated"
)

# Launch the interface with a public URL in Colab
interface.launch(share=True)

